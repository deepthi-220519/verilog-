
//Design Module
//Sequence to be detected is 1110

module fsm_moore_nonoverlap(input clock,reset,x,output y);
  parameter s0 = 3'b000;
  parameter s1 = 3'b001;
  parameter s2 = 3'b010;
  parameter s3 = 3'b011;
  parameter s4 = 3'b100;
  reg [3:0] state,next_state;
  always @(posedge clock or posedge reset)
  begin
      if(reset)
          state <= s0;
      else
          state <= next_state;
  end
  always @(state or x)
  begin
    case(state)
      s0:begin
            if(x==0)
                next_state = s0;
            else   
                next_state = s1;
         end
      s1:begin
            if(x==0)
                next_state = s0;
            else   
                next_state = s2;
         end
      s2:begin
            if(x==0)
                next_state = s0;
            else   
                next_state = s3;
         end
      s3:begin
            if(x==0)
                next_state = s4;
            else   
                next_state = s3;
         end
      s4:begin
            if(x==0)
                next_state = s0;
            else   
                next_state = s1;
         end
     default: next_state = s0;    
    endcase
   end
   assign y = (state == s4) && (x == 0) ? 1 : 0;
 endmodule  


//Testbench module

module tb_fsm_moore_nonoverlap();
  reg clock,reset,x;
  wire y;
  fsm_moore_nonoverlap i_fsm(clock,reset,x,y);
  always #5 clock = ~clock;
  initial begin
      $monitor("clock = %0d,reset = %0d,x = %0d,y = %0d",clock,reset,x,y);
      clock = 0;x = 0;
      #5 reset = 1;
      #6 reset = 0;
      #7 x = 0;
      #7 x = 1;
      #7 x = 1;
      #7 x = 1;
      #7 x = 0;
      #7 x = 1;
      #7 x = 1;
      #7 x = 0;
      #7 x = 0;
      #50 $finish();
  end
endmodule
